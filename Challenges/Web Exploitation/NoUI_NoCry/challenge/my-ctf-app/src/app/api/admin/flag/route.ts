import { NextRequest, NextResponse } from "next/server";
import jwt, { JwtPayload } from "jsonwebtoken";
import { FLAG } from "@/lib/flag";  // Ensure FLAG is defined properly (your real flag)
import { FAKE_FLAG } from "@/lib/flag";  // Fake flag for non-admins or unauthorized users
import { INTERNAL_ACCESS_SECRET } from "@/lib/puppeteer-secret";
import {JWT_SECRET} from "@/lib/jwt_secret";

export async function GET(req: NextRequest) {
  const token = req.headers.get("Authorization")?.replace("Bearer ", "");
  const headerOverride = req.headers.get("x-trusted-user");
  const userAgent = req.headers.get("user-agent") || "";
  const internalHeader = req.headers.get("x-internal-access");
  const isHeadless = userAgent.toLowerCase().includes("headless") || userAgent.includes("puppeteer");

  // Check for internal access and admin
  if (
    internalHeader !== INTERNAL_ACCESS_SECRET ||  // Replace with your internal access secret
    !isHeadless ||
    headerOverride !== "admin"
  ) {
    return new NextResponse(
      `<html><body><div id="admin-panel" data-content="${FAKE_FLAG}"></div></body></html>`,
      { status: 200, headers: { "Content-Type": "text/html" } }
    );
  }

  try {
    const data = jwt.verify(token || "", JWT_SECRET) as JwtPayload; 

    const issuedAt = data.ts;
    const now = Date.now();

    // Ensure the token has not expired
    if (!issuedAt || now - issuedAt > 30 * 1000) {
      return NextResponse.json({ error: "Token expired" }, { status: 403 });
    }

    if (data.name === "admin") {
      const html = `
        <html>
          <body>
            <div id="admin-panel" data-content="${FLAG}"></div>
          </body>
        </html>
      `;
      return new NextResponse(html, {
        status: 200,
        headers: { "Content-Type": "text/html" }
      });
    }

    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  } catch {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }
}
