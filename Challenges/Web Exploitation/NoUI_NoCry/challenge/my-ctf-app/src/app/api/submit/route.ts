import { NextRequest, NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import puppeteer from "puppeteer";
import { INTERNAL_ACCESS_SECRET } from "@/lib/puppeteer-secret";
import {JWT_SECRET} from "@/lib/jwt_secret";

export async function POST(req: NextRequest) {
  const { name, theme } = await req.json();


  // 2. Forge a real admin token for internal fetch to the flag endpoint
  const adminToken = jwt.sign(
    { name: "admin", ts: Date.now() },
    JWT_SECRET,
    { expiresIn: "30s" }
  );

  // 3. Fetch the protected flag page with admin token using Authorization header
  const flagRes = await fetch("http://127.0.0.1:3000/api/admin/flag", {
    headers: {
      "Authorization": `Bearer ${adminToken}`, 
      "x-trusted-user": "admin",
      "x-internal-access": INTERNAL_ACCESS_SECRET,
      "User-Agent": "HeadlessChrome/115.0.0.0"
    }
  });

  const flagHtml = await flagRes.text();

  function sanitizeCSS(input: string) {
    return input
      .split("\n")
      .filter(line => !/script|expression|@import|@font-face|url\(['"]?javascript:/i.test(line))
      .join("\n");
  }
  
  const htmlContent = `
  <html>
    <head>
      <meta http-equiv="Content-Security-Policy" content="style-src 'unsafe-inline'; default-src *">
      <style>${sanitizeCSS(theme)}</style>
    </head>
    <body>
      ${flagHtml}
    </body>
  </html>
  `;

  try {
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();

    await page.setContent(htmlContent);
    await new Promise(resolve => setTimeout(resolve, 2000));
    await browser.close();

    const response = NextResponse.json({ success: true });
    return response;
  } catch (err) {
    return NextResponse.json({ success: false, error: String(err) }, { status: 500 });
  }
}
