import { NextRequest, NextResponse } from "next/server";
import jwt, { JwtPayload } from "jsonwebtoken";
import { FLAG, FAKE_FLAG } from "@/lib/flag";
import { INTERNAL_ACCESS_SECRET } from "@/lib/puppeteer-secret";
import { JWT_SECRET } from "@/lib/jwt_secret";

export async function GET(req: NextRequest) {
  const token = req.headers.get("Authorization")?.replace("Bearer ", "");
  const userAgent = req.headers.get("user-agent") || "";
  const internalHeader = req.headers.get("x-internal-access");
  const headerOverride = req.headers.get("x-trusted-user");
  const isHeadless =
    userAgent.toLowerCase().includes("headless") || userAgent.includes("puppeteer");

  // Gatekeeper: Only allow if headless + internal + trusted
  if (
    internalHeader !== INTERNAL_ACCESS_SECRET ||
    headerOverride !== "admin" ||
    !isHeadless
  ) {
    return new NextResponse(
      `<html><body><div id="admin-panel" data-content="${FAKE_FLAG}"></div></body></html>`,
      { status: 200, headers: { "Content-Type": "text/html" } }
    );
  }

  try {
    const data = jwt.verify(token || "", JWT_SECRET) as JwtPayload;

    if (!data.ts || Date.now() - data.ts > 30 * 1000) {
      return NextResponse.json({ error: "Token expired" }, { status: 403 });
    }

    if (data.name === "admin") {
      return new NextResponse(
        `<html><body><div id="admin-panel" data-content="${FLAG}"></div></body></html>`,
        { status: 200, headers: { "Content-Type": "text/html" } }
      );
    }

    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  } catch {
    return NextResponse.json({ error: "Unauthorized" }, { status: 403 });
  }
}
