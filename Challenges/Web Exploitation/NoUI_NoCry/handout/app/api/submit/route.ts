import { NextRequest, NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import puppeteer from "puppeteer";
import { INTERNAL_ACCESS_SECRET } from "@/lib/puppeteer-secret";
import { JWT_SECRET } from "@/lib/jwt_secret";

export async function POST(req: NextRequest) {
  const { name, theme } = await req.json();

  const token = jwt.sign(
    { name: "admin", ts: Date.now() },
    JWT_SECRET,
    { expiresIn: "30s" }
  );

  const res = await fetch("http://127.0.0.1:3000/api/admin/flag", {
    headers: {
      "Authorization": `Bearer ${token}`,
      "x-trusted-user": "admin",
      "x-internal-access": INTERNAL_ACCESS_SECRET,
      "User-Agent": "HeadlessChrome"
    }
  });

  const flagHtml = await res.text();

  const html = `
    <html>
      <head>
        <meta http-equiv="Content-Security-Policy" content="style-src 'unsafe-inline'; default-src *">
        <style>${theme}</style>
      </head>
      <body>
        ${flagHtml}
      </body>
    </html>
  `;

  try {
    const browser = await puppeteer.launch({ headless: true, args: ["--no-sandbox"] });
    const page = await browser.newPage();
    await page.setContent(html);
    await new Promise(r => setTimeout(r, 2000));
    await browser.close();

    return NextResponse.json({ success: true });
  } catch (e) {
    return NextResponse.json({ success: false, error: "Rendering error" }, { status: 500 });
  }
}
